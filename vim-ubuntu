" ==============================================================================
set tabstop=8 " ts 制表符:设置TAB宽8个空格, 8个字符的缩进符合内核代码编程风格
set shiftwidth=8 " sw 制表符:自动缩进空白字符个数
set softtabstop=8 " sts 制表符:与tabstop共同决定一个Tab间缩进字符数量
"set expandtab " et 制表符:将制表符以空格代替,内核代码中不使用该特性
set textwidth=80 " 内核代码一行不超过80个字符
set autoindent " ai 自动缩进:
set cindent " ci 自动缩进:
set smartindent " si 自动缩进:
set number " 行号:设置行号,默认不显示行号
set nocompatible " 关闭与VI兼容,避免不必要的错误
set linebreak " 整词换行
set wrap " 自动换行
set shortmess=atI " 不显示援助乌干达儿童提示
set showmode " 状态栏显示vim当前模式
set scrolloff=0 " 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set showmatch " 括号配对情况, 跳转并高亮一下匹配的括号
set showcmd " 在状态栏显示正在输入的命令
set history=1000 " 历史记录
set ruler " 编辑过程中在右下角显示光标位置的状态行
"set mouse=a " 禁用鼠标选中
"set selection=exclusive " 禁用鼠标选中
"set selectmode=mouse,key " 禁用鼠标选中
set autowrite " 自动保存
set autoread " 自动读取:当文件被改动时自动读取
"set hlsearch " 搜索字符串:高亮显示所有匹配处
"set cursorline " 不突出显示光标所在行
set incsearch " 搜索字符串:搜索字符串立即显示匹配点
set confirm " 在处理未保存或只读文件的时候，弹出确认 
if has("syntax")
	syntax on " 启用语法高亮
	syntax enable " 启用语法高亮
endif
set iskeyword+=_,$,@,%,#,- " 带有如下符号的单词不要被换行分割
set noerrorbells " 关闭错误信息响铃
set formatoptions+=m " 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=B " 合并两行中文时，不在中间加空格
set fileencoding=utf-8 "设置当前文件编码，可以更改
set ffs=unix,dos,mac " 文件格式，默认 ffs=dos,unix
set encoding=utf-8 " 设置新文件的编码为 UTF-8
set completeopt=longest,menu " 让Vim的补全菜单行为与一般IDE一致
set ttyfast
set laststatus=1 " 命令行高度,默认1
set t_ti= t_te=	" 设置退出vim时保留当前画面(防误删)
set nofoldenable " 关闭代码折叠
" ==============================================================================
filetype on " 侦测文件类型
filetype plugin on "载入文件类型插件
filetype plugin indent on " 加载vim自带和插件相应的语法和文件类型相关脚本
" ==============================================================================
set rtp+=~/.vim/bundle/Vundle.vim "vundle安装地址
call vundle#begin() "插件安装地址
Plugin 'VundleVim/Vundle.vim'
Plugin 'Yggdroot/indentLine' " 缩进提示
Plugin 'kien/rainbow_parentheses.vim' " 括号高亮
Plugin 'jiangmiao/auto-pairs' " 括号补全
Plugin 'Shougo/neocomplete.vim' " 代码补全
Plugin 'vim-scripts/DoxygenToolkit.vim' " 注释自动生成
Plugin 'godlygeek/tabular' " 排列文本的插件
Plugin 'plasticboy/vim-markdown' " markdown语法高亮
Plugin 'suan/vim-instant-markdown' " markdown实时预览插件   
Plugin 'majutsushi/tagbar' " 大纲生成
Plugin 'scrooloose/nerdtree' " 文件浏览插件NerdTree
Plugin 'yifengyou/vim-color' " yyf vim 主题
Plugin 'w0rp/ale'
Plugin 'yianwillis/vimcdoc'
Plugin 'gdbmgr'
Plugin 'ludovicchabant/vim-gutentags' " 自动索引
Plugin 'Valloric/YouCompleteMe' " 自动补全工具
call vundle#end()
" ==============================================================================
set t_Co=256 " 启用256色彩显示
set background=dark 
colorscheme yyf-kuroi " 设置主题:必须放置本配置文件插件安装之后的位置
set guifont=Monospace\ 14 " 设置字体,仅在GUI vim 环境下有效
hi! link signcolumn   linenr
hi! link showmarkshll diffadd
hi! link showmarkshlu diffchange
" ==============================================================================
set pastetoggle=<F9> " F9:粘贴文本避免错乱 
" 选中状态下 Ctrl+c Ctrl+v 复制粘贴
imap <C-v> <Esc>"*pa
imap <C-a> <Esc>^
imap <C-e> <Esc>$
vmap <C-c> "+y
" 禁用键盘中的上下左右,强制使用jk hl(下上左右)
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <C-Down>  <C-W>j
noremap <C-Up>    <C-W>k
noremap <C-Left>  <C-W>h
noremap <C-Right> <C-W>l
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l
"插入模式下方向键的使用
imap <c-k> <Up>
imap <c-j> <Down>
imap <c-h> <Left>
imap <c-l> <Right>
" 删除多余空行
:nmap cl :1,$g/^$/d
" 删除行尾空格和tab符号
:nmap cs :1,$s/\s\+$//g
:nmap ct :1,$s/\t\+$//g
" 删除行尾^M符号
:nmap cm :1,$s/\r//g
" Windows风格全选组合键<c-a>
nmap <c-a> ggVG$
imap <c-a> <ESC>ggVG$
" ==============================================================================
" 自动加载ctags: ctags -R
if filereadable("tags")
	set tags=tags
endif
" ==============================================================================
" cscope:建立数据库：cscope -Rbq 
" F5 查找c符号； F6 查找字符串；   F7 查找函数定义； F8 查找函数被谁调用了，
if has("cscope")
	set csprg=/usr/bin/cscope
	set csto=1
	set cst
	set nocsverb
	" add any database in current directory
	if filereadable("cscope.out")
		cs add cscope.out
	endif
	set csverb
endif
:set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <silent> <F5> :cs find s <C-R>=expand("<cword>")<CR><CR> :botright copen<CR><CR> 
nmap <silent> <F6> :cs find t <C-R>=expand("<cword>")<CR><CR> :botright copen<CR><CR>
nmap <silent> <F7> :cs find c <C-R>=expand("<cword>")<CR><CR> :botright copen<CR><CR>
" ==============================================================================
map <F2> :call FormartSrc()<CR><CR>
"定义FormartSrc()
func FormartSrc()
	exec "w"
	if &filetype == 'c'
		exec "!astyle --style=ansi -a --suffix=none %"
	elseif &filetype == 'cpp' || &filetype == 'hpp'
		exec "r !astyle --style=ansi \
		--one-line=keep-statements -a --suffix=none %> /dev/null 2>&1"
	elseif &filetype == 'perl'
		exec "!astyle --style=gnu --suffix=none %"
	elseif &filetype == 'py'||&filetype == 'python'
		exec "r !autopep8 -i --aggressive %"
	elseif &filetype == 'java'
		exec "!astyle --style=java --suffix=none %"
	elseif &filetype == 'jsp'
		exec "!astyle --style=gnu --suffix=none %"
	elseif &filetype == 'xml'
		exec "!astyle --style=gnu --suffix=none %"
	else
		exec "normal gg=G"
		return
	endif
	exec "e! %"
endfunc
" =============================================================================
"
" NerdTree 配置列出当前目录文件  
let NERDTreeShowHidden=1
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC> :NERDTreeToggle<CR>
" 当vim中没有其他文件，只剩下NerdTree的时候，自动关闭窗口
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" 改变NerdTree的箭头
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = '^'
let g:NERDTreeWinPos = "left"
let g:neocomplcache_enable_at_startup = 1 
let NERDTreeAutoCenter = 1
" let NERDTreeShowBookmarks = 1
" ==============================================================================
" TagBar
nmap <silent> <F4> :TagbarToggle<CR>  
" let g:tagbar_width = 25
let g:tagbar_ctags_bin = 'ctags'  
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() " 自动打开TagBar
" ==============================================================================
" ALE静态语法检测
let g:ale_sign_column_always = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = 'w'
let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
let g:ale_echo_msg_format = '[%linter%] %code: %%s'
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
"let g:airline#extensions#ale#enabled = 1
let g:ale_c_gcc_options = '-Wall -O2 -std=c99'
let g:ale_cpp_gcc_options = '-Wall -O2 -std=c++14'
let g:ale_c_cppcheck_options = ''
let g:ale_cpp_cppcheck_options = ''
" ==============================================================================
" 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project', '.gitignore']
" 添加ctags额外参数，会让tags文件变大
" let g:gutentags_ctags_extra_args = ['--fields=+niazlS', '--extra=+q']
let g:gutentags_ctags_extra_args = ['--fields=+lS']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
if isdirectory("kernel/") && isdirectory("mm/")
	let g:gutentags_file_list_command = 'find arch/arm/ mm/ kernel/ include/ init/ lib/'
endif
" ==============================================================================
let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf='~/.vim/.ycm_extra_conf.py'
" YCM 查找定义
let mapleader=','
nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_collect_identifiers_from_tags_files = 1
set completeopt=menu,menuone   
let g:ycm_add_preview_to_completeopt = 0  " 关闭函数原型提示
let g:ycm_show_diagnostics_ui = 0 " 关闭诊断信息
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2  " 两个字符触发 补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1 " 收集
let g:ycm_complete_in_strings=1
noremap <c-z> <NOP>
let g:ycm_key_invoke_completion = '<c-z>'   " YCM 里触发语义补全有一个快捷键
let g:ycm_max_num_candidates = 15  " 候选数量
let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
" ==============================================================================
